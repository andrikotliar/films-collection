/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StatisticRouteImport } from './routes/statistic/route'
import { Route as LoginRouteImport } from './routes/login/route'
import { Route as ConsoleRouteImport } from './routes/console/route'
import { Route as IndexImport } from './routes/index'
import { Route as FilmFilmIdImport } from './routes/film/$filmId'
import { Route as ConsolePendingRouteImport } from './routes/console/pending/route'
import { Route as ConsoleManageRouteImport } from './routes/console/manage/route'
import { Route as ConsoleCollectionEventsRouteImport } from './routes/console/collection-events/route'
import { Route as ConsoleAdditionalRouteImport } from './routes/console/additional/route'
import { Route as ConsoleManageIdImport } from './routes/console/manage_/$id'

// Create Virtual Routes

const AboutRouteLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutRouteLazyRoute = AboutRouteLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/route.lazy').then((d) => d.Route))

const StatisticRouteRoute = StatisticRouteImport.update({
  id: '/statistic',
  path: '/statistic',
  getParentRoute: () => rootRoute,
} as any)

const LoginRouteRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/route.lazy').then((d) => d.Route))

const ConsoleRouteRoute = ConsoleRouteImport.update({
  id: '/console',
  path: '/console',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FilmFilmIdRoute = FilmFilmIdImport.update({
  id: '/film/$filmId',
  path: '/film/$filmId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/film/$filmId.lazy').then((d) => d.Route))

const ConsolePendingRouteRoute = ConsolePendingRouteImport.update({
  id: '/pending',
  path: '/pending',
  getParentRoute: () => ConsoleRouteRoute,
} as any).lazy(() =>
  import('./routes/console/pending/route.lazy').then((d) => d.Route),
)

const ConsoleManageRouteRoute = ConsoleManageRouteImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleCollectionEventsRouteRoute =
  ConsoleCollectionEventsRouteImport.update({
    id: '/collection-events',
    path: '/collection-events',
    getParentRoute: () => ConsoleRouteRoute,
  } as any)

const ConsoleAdditionalRouteRoute = ConsoleAdditionalRouteImport.update({
  id: '/additional',
  path: '/additional',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleManageIdRoute = ConsoleManageIdImport.update({
  id: '/manage_/$id',
  path: '/manage/$id',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/console': {
      id: '/console'
      path: '/console'
      fullPath: '/console'
      preLoaderRoute: typeof ConsoleRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/statistic': {
      id: '/statistic'
      path: '/statistic'
      fullPath: '/statistic'
      preLoaderRoute: typeof StatisticRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/console/additional': {
      id: '/console/additional'
      path: '/additional'
      fullPath: '/console/additional'
      preLoaderRoute: typeof ConsoleAdditionalRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/collection-events': {
      id: '/console/collection-events'
      path: '/collection-events'
      fullPath: '/console/collection-events'
      preLoaderRoute: typeof ConsoleCollectionEventsRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/manage': {
      id: '/console/manage'
      path: '/manage'
      fullPath: '/console/manage'
      preLoaderRoute: typeof ConsoleManageRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/pending': {
      id: '/console/pending'
      path: '/pending'
      fullPath: '/console/pending'
      preLoaderRoute: typeof ConsolePendingRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/film/$filmId': {
      id: '/film/$filmId'
      path: '/film/$filmId'
      fullPath: '/film/$filmId'
      preLoaderRoute: typeof FilmFilmIdImport
      parentRoute: typeof rootRoute
    }
    '/console/manage_/$id': {
      id: '/console/manage_/$id'
      path: '/manage/$id'
      fullPath: '/console/manage/$id'
      preLoaderRoute: typeof ConsoleManageIdImport
      parentRoute: typeof ConsoleRouteImport
    }
  }
}

// Create and export the route tree

interface ConsoleRouteRouteChildren {
  ConsoleAdditionalRouteRoute: typeof ConsoleAdditionalRouteRoute
  ConsoleCollectionEventsRouteRoute: typeof ConsoleCollectionEventsRouteRoute
  ConsoleManageRouteRoute: typeof ConsoleManageRouteRoute
  ConsolePendingRouteRoute: typeof ConsolePendingRouteRoute
  ConsoleManageIdRoute: typeof ConsoleManageIdRoute
}

const ConsoleRouteRouteChildren: ConsoleRouteRouteChildren = {
  ConsoleAdditionalRouteRoute: ConsoleAdditionalRouteRoute,
  ConsoleCollectionEventsRouteRoute: ConsoleCollectionEventsRouteRoute,
  ConsoleManageRouteRoute: ConsoleManageRouteRoute,
  ConsolePendingRouteRoute: ConsolePendingRouteRoute,
  ConsoleManageIdRoute: ConsoleManageIdRoute,
}

const ConsoleRouteRouteWithChildren = ConsoleRouteRoute._addFileChildren(
  ConsoleRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/console': typeof ConsoleRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/statistic': typeof StatisticRouteRoute
  '/about': typeof AboutRouteLazyRoute
  '/console/additional': typeof ConsoleAdditionalRouteRoute
  '/console/collection-events': typeof ConsoleCollectionEventsRouteRoute
  '/console/manage': typeof ConsoleManageRouteRoute
  '/console/pending': typeof ConsolePendingRouteRoute
  '/film/$filmId': typeof FilmFilmIdRoute
  '/console/manage/$id': typeof ConsoleManageIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/console': typeof ConsoleRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/statistic': typeof StatisticRouteRoute
  '/about': typeof AboutRouteLazyRoute
  '/console/additional': typeof ConsoleAdditionalRouteRoute
  '/console/collection-events': typeof ConsoleCollectionEventsRouteRoute
  '/console/manage': typeof ConsoleManageRouteRoute
  '/console/pending': typeof ConsolePendingRouteRoute
  '/film/$filmId': typeof FilmFilmIdRoute
  '/console/manage/$id': typeof ConsoleManageIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/console': typeof ConsoleRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/statistic': typeof StatisticRouteRoute
  '/about': typeof AboutRouteLazyRoute
  '/console/additional': typeof ConsoleAdditionalRouteRoute
  '/console/collection-events': typeof ConsoleCollectionEventsRouteRoute
  '/console/manage': typeof ConsoleManageRouteRoute
  '/console/pending': typeof ConsolePendingRouteRoute
  '/film/$filmId': typeof FilmFilmIdRoute
  '/console/manage_/$id': typeof ConsoleManageIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/console'
    | '/login'
    | '/statistic'
    | '/about'
    | '/console/additional'
    | '/console/collection-events'
    | '/console/manage'
    | '/console/pending'
    | '/film/$filmId'
    | '/console/manage/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/console'
    | '/login'
    | '/statistic'
    | '/about'
    | '/console/additional'
    | '/console/collection-events'
    | '/console/manage'
    | '/console/pending'
    | '/film/$filmId'
    | '/console/manage/$id'
  id:
    | '__root__'
    | '/'
    | '/console'
    | '/login'
    | '/statistic'
    | '/about'
    | '/console/additional'
    | '/console/collection-events'
    | '/console/manage'
    | '/console/pending'
    | '/film/$filmId'
    | '/console/manage_/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConsoleRouteRoute: typeof ConsoleRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
  StatisticRouteRoute: typeof StatisticRouteRoute
  AboutRouteLazyRoute: typeof AboutRouteLazyRoute
  FilmFilmIdRoute: typeof FilmFilmIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConsoleRouteRoute: ConsoleRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
  StatisticRouteRoute: StatisticRouteRoute,
  AboutRouteLazyRoute: AboutRouteLazyRoute,
  FilmFilmIdRoute: FilmFilmIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/console",
        "/login",
        "/statistic",
        "/about",
        "/film/$filmId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/console": {
      "filePath": "console/route.tsx",
      "children": [
        "/console/additional",
        "/console/collection-events",
        "/console/manage",
        "/console/pending",
        "/console/manage_/$id"
      ]
    },
    "/login": {
      "filePath": "login/route.tsx"
    },
    "/statistic": {
      "filePath": "statistic/route.tsx"
    },
    "/about": {
      "filePath": "about/route.lazy.tsx"
    },
    "/console/additional": {
      "filePath": "console/additional/route.tsx",
      "parent": "/console"
    },
    "/console/collection-events": {
      "filePath": "console/collection-events/route.tsx",
      "parent": "/console"
    },
    "/console/manage": {
      "filePath": "console/manage/route.tsx",
      "parent": "/console"
    },
    "/console/pending": {
      "filePath": "console/pending/route.tsx",
      "parent": "/console"
    },
    "/film/$filmId": {
      "filePath": "film/$filmId.tsx"
    },
    "/console/manage_/$id": {
      "filePath": "console/manage_/$id.tsx",
      "parent": "/console"
    }
  }
}
ROUTE_MANIFEST_END */
