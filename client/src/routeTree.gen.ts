/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StatisticRouteImport } from './routes/statistic/route'
import { Route as LoginRouteImport } from './routes/login/route'
import { Route as ConsoleRouteImport } from './routes/console/route'
import { Route as AboutRouteImport } from './routes/about/route'
import { Route as HomeIndexImport } from './routes/_home/index'
import { Route as FilmIdImport } from './routes/film/$id'
import { Route as ConsolePendingRouteImport } from './routes/console/pending/route'
import { Route as ConsolePageContentRouteImport } from './routes/console/page-content/route'
import { Route as ConsoleManageRouteImport } from './routes/console/manage/route'
import { Route as ConsoleGeneralRouteImport } from './routes/console/general/route'
import { Route as ConsoleCollectionEventsRouteImport } from './routes/console/collection-events/route'
import { Route as ConsolePageContentIdImport } from './routes/console/page-content_/$id'
import { Route as ConsoleManageIdImport } from './routes/console/manage_/$id'
import { Route as ConsoleGeneralStudiosRouteImport } from './routes/console/general_/studios/route'
import { Route as ConsoleGeneralPeopleRouteImport } from './routes/console/general_/people/route'
import { Route as ConsoleGeneralGenresRouteImport } from './routes/console/general_/genres/route'
import { Route as ConsoleGeneralCountriesRouteImport } from './routes/console/general_/countries/route'
import { Route as ConsoleGeneralCollectionsRouteImport } from './routes/console/general_/collections/route'
import { Route as ConsoleGeneralAwardsRouteImport } from './routes/console/general_/awards/route'
import { Route as ConsoleGeneralAwardsIdImport } from './routes/console/general_/awards_/$id'

// Create/Update Routes

const StatisticRouteRoute = StatisticRouteImport.update({
  id: '/statistic',
  path: '/statistic',
  getParentRoute: () => rootRoute,
} as any)

const LoginRouteRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ConsoleRouteRoute = ConsoleRouteImport.update({
  id: '/console',
  path: '/console',
  getParentRoute: () => rootRoute,
} as any)

const AboutRouteRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/_home/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FilmIdRoute = FilmIdImport.update({
  id: '/film/$id',
  path: '/film/$id',
  getParentRoute: () => rootRoute,
} as any)

const ConsolePendingRouteRoute = ConsolePendingRouteImport.update({
  id: '/pending',
  path: '/pending',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsolePageContentRouteRoute = ConsolePageContentRouteImport.update({
  id: '/page-content',
  path: '/page-content',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleManageRouteRoute = ConsoleManageRouteImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleGeneralRouteRoute = ConsoleGeneralRouteImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleCollectionEventsRouteRoute =
  ConsoleCollectionEventsRouteImport.update({
    id: '/collection-events',
    path: '/collection-events',
    getParentRoute: () => ConsoleRouteRoute,
  } as any)

const ConsolePageContentIdRoute = ConsolePageContentIdImport.update({
  id: '/page-content_/$id',
  path: '/page-content/$id',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleManageIdRoute = ConsoleManageIdImport.update({
  id: '/manage_/$id',
  path: '/manage/$id',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleGeneralStudiosRouteRoute = ConsoleGeneralStudiosRouteImport.update(
  {
    id: '/general_/studios',
    path: '/general/studios',
    getParentRoute: () => ConsoleRouteRoute,
  } as any,
)

const ConsoleGeneralPeopleRouteRoute = ConsoleGeneralPeopleRouteImport.update({
  id: '/general_/people',
  path: '/general/people',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleGeneralGenresRouteRoute = ConsoleGeneralGenresRouteImport.update({
  id: '/general_/genres',
  path: '/general/genres',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleGeneralCountriesRouteRoute =
  ConsoleGeneralCountriesRouteImport.update({
    id: '/general_/countries',
    path: '/general/countries',
    getParentRoute: () => ConsoleRouteRoute,
  } as any)

const ConsoleGeneralCollectionsRouteRoute =
  ConsoleGeneralCollectionsRouteImport.update({
    id: '/general_/collections',
    path: '/general/collections',
    getParentRoute: () => ConsoleRouteRoute,
  } as any)

const ConsoleGeneralAwardsRouteRoute = ConsoleGeneralAwardsRouteImport.update({
  id: '/general_/awards',
  path: '/general/awards',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

const ConsoleGeneralAwardsIdRoute = ConsoleGeneralAwardsIdImport.update({
  id: '/general_/awards_/$id',
  path: '/general/awards/$id',
  getParentRoute: () => ConsoleRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRoute
    }
    '/console': {
      id: '/console'
      path: '/console'
      fullPath: '/console'
      preLoaderRoute: typeof ConsoleRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/statistic': {
      id: '/statistic'
      path: '/statistic'
      fullPath: '/statistic'
      preLoaderRoute: typeof StatisticRouteImport
      parentRoute: typeof rootRoute
    }
    '/console/collection-events': {
      id: '/console/collection-events'
      path: '/collection-events'
      fullPath: '/console/collection-events'
      preLoaderRoute: typeof ConsoleCollectionEventsRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/general': {
      id: '/console/general'
      path: '/general'
      fullPath: '/console/general'
      preLoaderRoute: typeof ConsoleGeneralRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/manage': {
      id: '/console/manage'
      path: '/manage'
      fullPath: '/console/manage'
      preLoaderRoute: typeof ConsoleManageRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/page-content': {
      id: '/console/page-content'
      path: '/page-content'
      fullPath: '/console/page-content'
      preLoaderRoute: typeof ConsolePageContentRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/pending': {
      id: '/console/pending'
      path: '/pending'
      fullPath: '/console/pending'
      preLoaderRoute: typeof ConsolePendingRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/film/$id': {
      id: '/film/$id'
      path: '/film/$id'
      fullPath: '/film/$id'
      preLoaderRoute: typeof FilmIdImport
      parentRoute: typeof rootRoute
    }
    '/_home/': {
      id: '/_home/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/console/general_/awards': {
      id: '/console/general_/awards'
      path: '/general/awards'
      fullPath: '/console/general/awards'
      preLoaderRoute: typeof ConsoleGeneralAwardsRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/general_/collections': {
      id: '/console/general_/collections'
      path: '/general/collections'
      fullPath: '/console/general/collections'
      preLoaderRoute: typeof ConsoleGeneralCollectionsRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/general_/countries': {
      id: '/console/general_/countries'
      path: '/general/countries'
      fullPath: '/console/general/countries'
      preLoaderRoute: typeof ConsoleGeneralCountriesRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/general_/genres': {
      id: '/console/general_/genres'
      path: '/general/genres'
      fullPath: '/console/general/genres'
      preLoaderRoute: typeof ConsoleGeneralGenresRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/general_/people': {
      id: '/console/general_/people'
      path: '/general/people'
      fullPath: '/console/general/people'
      preLoaderRoute: typeof ConsoleGeneralPeopleRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/general_/studios': {
      id: '/console/general_/studios'
      path: '/general/studios'
      fullPath: '/console/general/studios'
      preLoaderRoute: typeof ConsoleGeneralStudiosRouteImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/manage_/$id': {
      id: '/console/manage_/$id'
      path: '/manage/$id'
      fullPath: '/console/manage/$id'
      preLoaderRoute: typeof ConsoleManageIdImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/page-content_/$id': {
      id: '/console/page-content_/$id'
      path: '/page-content/$id'
      fullPath: '/console/page-content/$id'
      preLoaderRoute: typeof ConsolePageContentIdImport
      parentRoute: typeof ConsoleRouteImport
    }
    '/console/general_/awards_/$id': {
      id: '/console/general_/awards_/$id'
      path: '/general/awards/$id'
      fullPath: '/console/general/awards/$id'
      preLoaderRoute: typeof ConsoleGeneralAwardsIdImport
      parentRoute: typeof ConsoleRouteImport
    }
  }
}

// Create and export the route tree

interface ConsoleRouteRouteChildren {
  ConsoleCollectionEventsRouteRoute: typeof ConsoleCollectionEventsRouteRoute
  ConsoleGeneralRouteRoute: typeof ConsoleGeneralRouteRoute
  ConsoleManageRouteRoute: typeof ConsoleManageRouteRoute
  ConsolePageContentRouteRoute: typeof ConsolePageContentRouteRoute
  ConsolePendingRouteRoute: typeof ConsolePendingRouteRoute
  ConsoleGeneralAwardsRouteRoute: typeof ConsoleGeneralAwardsRouteRoute
  ConsoleGeneralCollectionsRouteRoute: typeof ConsoleGeneralCollectionsRouteRoute
  ConsoleGeneralCountriesRouteRoute: typeof ConsoleGeneralCountriesRouteRoute
  ConsoleGeneralGenresRouteRoute: typeof ConsoleGeneralGenresRouteRoute
  ConsoleGeneralPeopleRouteRoute: typeof ConsoleGeneralPeopleRouteRoute
  ConsoleGeneralStudiosRouteRoute: typeof ConsoleGeneralStudiosRouteRoute
  ConsoleManageIdRoute: typeof ConsoleManageIdRoute
  ConsolePageContentIdRoute: typeof ConsolePageContentIdRoute
  ConsoleGeneralAwardsIdRoute: typeof ConsoleGeneralAwardsIdRoute
}

const ConsoleRouteRouteChildren: ConsoleRouteRouteChildren = {
  ConsoleCollectionEventsRouteRoute: ConsoleCollectionEventsRouteRoute,
  ConsoleGeneralRouteRoute: ConsoleGeneralRouteRoute,
  ConsoleManageRouteRoute: ConsoleManageRouteRoute,
  ConsolePageContentRouteRoute: ConsolePageContentRouteRoute,
  ConsolePendingRouteRoute: ConsolePendingRouteRoute,
  ConsoleGeneralAwardsRouteRoute: ConsoleGeneralAwardsRouteRoute,
  ConsoleGeneralCollectionsRouteRoute: ConsoleGeneralCollectionsRouteRoute,
  ConsoleGeneralCountriesRouteRoute: ConsoleGeneralCountriesRouteRoute,
  ConsoleGeneralGenresRouteRoute: ConsoleGeneralGenresRouteRoute,
  ConsoleGeneralPeopleRouteRoute: ConsoleGeneralPeopleRouteRoute,
  ConsoleGeneralStudiosRouteRoute: ConsoleGeneralStudiosRouteRoute,
  ConsoleManageIdRoute: ConsoleManageIdRoute,
  ConsolePageContentIdRoute: ConsolePageContentIdRoute,
  ConsoleGeneralAwardsIdRoute: ConsoleGeneralAwardsIdRoute,
}

const ConsoleRouteRouteWithChildren = ConsoleRouteRoute._addFileChildren(
  ConsoleRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/about': typeof AboutRouteRoute
  '/console': typeof ConsoleRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/statistic': typeof StatisticRouteRoute
  '/console/collection-events': typeof ConsoleCollectionEventsRouteRoute
  '/console/general': typeof ConsoleGeneralRouteRoute
  '/console/manage': typeof ConsoleManageRouteRoute
  '/console/page-content': typeof ConsolePageContentRouteRoute
  '/console/pending': typeof ConsolePendingRouteRoute
  '/film/$id': typeof FilmIdRoute
  '/': typeof HomeIndexRoute
  '/console/general/awards': typeof ConsoleGeneralAwardsRouteRoute
  '/console/general/collections': typeof ConsoleGeneralCollectionsRouteRoute
  '/console/general/countries': typeof ConsoleGeneralCountriesRouteRoute
  '/console/general/genres': typeof ConsoleGeneralGenresRouteRoute
  '/console/general/people': typeof ConsoleGeneralPeopleRouteRoute
  '/console/general/studios': typeof ConsoleGeneralStudiosRouteRoute
  '/console/manage/$id': typeof ConsoleManageIdRoute
  '/console/page-content/$id': typeof ConsolePageContentIdRoute
  '/console/general/awards/$id': typeof ConsoleGeneralAwardsIdRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRouteRoute
  '/console': typeof ConsoleRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/statistic': typeof StatisticRouteRoute
  '/console/collection-events': typeof ConsoleCollectionEventsRouteRoute
  '/console/general': typeof ConsoleGeneralRouteRoute
  '/console/manage': typeof ConsoleManageRouteRoute
  '/console/page-content': typeof ConsolePageContentRouteRoute
  '/console/pending': typeof ConsolePendingRouteRoute
  '/film/$id': typeof FilmIdRoute
  '/': typeof HomeIndexRoute
  '/console/general/awards': typeof ConsoleGeneralAwardsRouteRoute
  '/console/general/collections': typeof ConsoleGeneralCollectionsRouteRoute
  '/console/general/countries': typeof ConsoleGeneralCountriesRouteRoute
  '/console/general/genres': typeof ConsoleGeneralGenresRouteRoute
  '/console/general/people': typeof ConsoleGeneralPeopleRouteRoute
  '/console/general/studios': typeof ConsoleGeneralStudiosRouteRoute
  '/console/manage/$id': typeof ConsoleManageIdRoute
  '/console/page-content/$id': typeof ConsolePageContentIdRoute
  '/console/general/awards/$id': typeof ConsoleGeneralAwardsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/about': typeof AboutRouteRoute
  '/console': typeof ConsoleRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/statistic': typeof StatisticRouteRoute
  '/console/collection-events': typeof ConsoleCollectionEventsRouteRoute
  '/console/general': typeof ConsoleGeneralRouteRoute
  '/console/manage': typeof ConsoleManageRouteRoute
  '/console/page-content': typeof ConsolePageContentRouteRoute
  '/console/pending': typeof ConsolePendingRouteRoute
  '/film/$id': typeof FilmIdRoute
  '/_home/': typeof HomeIndexRoute
  '/console/general_/awards': typeof ConsoleGeneralAwardsRouteRoute
  '/console/general_/collections': typeof ConsoleGeneralCollectionsRouteRoute
  '/console/general_/countries': typeof ConsoleGeneralCountriesRouteRoute
  '/console/general_/genres': typeof ConsoleGeneralGenresRouteRoute
  '/console/general_/people': typeof ConsoleGeneralPeopleRouteRoute
  '/console/general_/studios': typeof ConsoleGeneralStudiosRouteRoute
  '/console/manage_/$id': typeof ConsoleManageIdRoute
  '/console/page-content_/$id': typeof ConsolePageContentIdRoute
  '/console/general_/awards_/$id': typeof ConsoleGeneralAwardsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/console'
    | '/login'
    | '/statistic'
    | '/console/collection-events'
    | '/console/general'
    | '/console/manage'
    | '/console/page-content'
    | '/console/pending'
    | '/film/$id'
    | '/'
    | '/console/general/awards'
    | '/console/general/collections'
    | '/console/general/countries'
    | '/console/general/genres'
    | '/console/general/people'
    | '/console/general/studios'
    | '/console/manage/$id'
    | '/console/page-content/$id'
    | '/console/general/awards/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/console'
    | '/login'
    | '/statistic'
    | '/console/collection-events'
    | '/console/general'
    | '/console/manage'
    | '/console/page-content'
    | '/console/pending'
    | '/film/$id'
    | '/'
    | '/console/general/awards'
    | '/console/general/collections'
    | '/console/general/countries'
    | '/console/general/genres'
    | '/console/general/people'
    | '/console/general/studios'
    | '/console/manage/$id'
    | '/console/page-content/$id'
    | '/console/general/awards/$id'
  id:
    | '__root__'
    | '/about'
    | '/console'
    | '/login'
    | '/statistic'
    | '/console/collection-events'
    | '/console/general'
    | '/console/manage'
    | '/console/page-content'
    | '/console/pending'
    | '/film/$id'
    | '/_home/'
    | '/console/general_/awards'
    | '/console/general_/collections'
    | '/console/general_/countries'
    | '/console/general_/genres'
    | '/console/general_/people'
    | '/console/general_/studios'
    | '/console/manage_/$id'
    | '/console/page-content_/$id'
    | '/console/general_/awards_/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AboutRouteRoute: typeof AboutRouteRoute
  ConsoleRouteRoute: typeof ConsoleRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
  StatisticRouteRoute: typeof StatisticRouteRoute
  FilmIdRoute: typeof FilmIdRoute
  HomeIndexRoute: typeof HomeIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AboutRouteRoute: AboutRouteRoute,
  ConsoleRouteRoute: ConsoleRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
  StatisticRouteRoute: StatisticRouteRoute,
  FilmIdRoute: FilmIdRoute,
  HomeIndexRoute: HomeIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/about",
        "/console",
        "/login",
        "/statistic",
        "/film/$id",
        "/_home/"
      ]
    },
    "/about": {
      "filePath": "about/route.tsx"
    },
    "/console": {
      "filePath": "console/route.tsx",
      "children": [
        "/console/collection-events",
        "/console/general",
        "/console/manage",
        "/console/page-content",
        "/console/pending",
        "/console/general_/awards",
        "/console/general_/collections",
        "/console/general_/countries",
        "/console/general_/genres",
        "/console/general_/people",
        "/console/general_/studios",
        "/console/manage_/$id",
        "/console/page-content_/$id",
        "/console/general_/awards_/$id"
      ]
    },
    "/login": {
      "filePath": "login/route.tsx"
    },
    "/statistic": {
      "filePath": "statistic/route.tsx"
    },
    "/console/collection-events": {
      "filePath": "console/collection-events/route.tsx",
      "parent": "/console"
    },
    "/console/general": {
      "filePath": "console/general/route.tsx",
      "parent": "/console"
    },
    "/console/manage": {
      "filePath": "console/manage/route.tsx",
      "parent": "/console"
    },
    "/console/page-content": {
      "filePath": "console/page-content/route.tsx",
      "parent": "/console"
    },
    "/console/pending": {
      "filePath": "console/pending/route.tsx",
      "parent": "/console"
    },
    "/film/$id": {
      "filePath": "film/$id.tsx"
    },
    "/_home/": {
      "filePath": "_home/index.tsx"
    },
    "/console/general_/awards": {
      "filePath": "console/general_/awards/route.tsx",
      "parent": "/console"
    },
    "/console/general_/collections": {
      "filePath": "console/general_/collections/route.tsx",
      "parent": "/console"
    },
    "/console/general_/countries": {
      "filePath": "console/general_/countries/route.tsx",
      "parent": "/console"
    },
    "/console/general_/genres": {
      "filePath": "console/general_/genres/route.tsx",
      "parent": "/console"
    },
    "/console/general_/people": {
      "filePath": "console/general_/people/route.tsx",
      "parent": "/console"
    },
    "/console/general_/studios": {
      "filePath": "console/general_/studios/route.tsx",
      "parent": "/console"
    },
    "/console/manage_/$id": {
      "filePath": "console/manage_/$id.tsx",
      "parent": "/console"
    },
    "/console/page-content_/$id": {
      "filePath": "console/page-content_/$id.tsx",
      "parent": "/console"
    },
    "/console/general_/awards_/$id": {
      "filePath": "console/general_/awards_/$id.tsx",
      "parent": "/console"
    }
  }
}
ROUTE_MANIFEST_END */
