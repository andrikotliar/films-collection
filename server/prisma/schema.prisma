generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Film {
  id               Int                   @id @default(autoincrement())
  title            String
  type             TitleType             @default(FILM)
  style            TitleStyle            @default(LIVE_ACTION)
  releaseDate      DateTime              @map("release_date") @db.Date
  duration         Int                   @default(0)
  description      String
  poster           String
  budget           BigInt                @default(0)
  boxOffice        BigInt                @default(0) @map("box_office")
  rating           Int                   @default(1)
  chapterKey       String?               @map("chapter_key")
  chapterKeys      FilmChapterKey?       @relation(fields: [chapterKey], references: [key], onDelete: SetNull)
  chapterOrder     Int?                  @map("chapter_order")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")
  draft            Boolean               @default(false)
  castAndCrew      FilmPerson[]
  genres           FilmGenre[]
  countries        FilmCountry[]
  studios          FilmStudio[]
  collections      FilmCollection[]
  awards           FilmAwardNomination[]
  trailers         FilmTrailer[]
  seriesExtension  SeriesExtension?
  collectionEvents CollectionEvent[]

  @@index([title])
  @@map("films")
}

model Person {
  id        Int                   @id @default(autoincrement())
  name      String
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")
  selected  Boolean               @default(false)
  awards    FilmAwardNomination[]
  films     FilmPerson[]

  @@map("people")
}

model FilmPerson {
  id        Int        @id @default(autoincrement())
  personId  Int        @map("person_id")
  person    Person     @relation(fields: [personId], references: [id], onDelete: Cascade)
  filmId    Int        @map("film_id")
  film      Film       @relation(fields: [filmId], references: [id], onDelete: Cascade)
  role      PersonRole
  details   String?
  comment   String?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("films_people")
}

model Genre {
  id        Int         @id @default(autoincrement())
  title     String      @unique
  films     FilmGenre[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("genres")
}

model FilmGenre {
  id        Int      @id @default(autoincrement())
  filmId    Int      @map("film_id")
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  genreId   Int      @map("genre_id")
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([filmId, genreId])
  @@map("films_genres")
}

model Country {
  id        Int           @id @default(autoincrement())
  title     String        @unique
  films     FilmCountry[]
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("countries")
}

model FilmCountry {
  id        Int      @id @default(autoincrement())
  filmId    Int      @map("film_id")
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  countryId Int      @map("country_id")
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([filmId, countryId])
  @@map("films_countries")
}

model Studio {
  id        Int          @id @default(autoincrement())
  title     String       @unique
  films     FilmStudio[]
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  @@map("studios")
}

model FilmStudio {
  id        Int      @id @default(autoincrement())
  filmId    Int      @map("film_id")
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  studioId  Int      @map("studio_id")
  studio    Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([filmId, studioId])
  @@map("films_studios")
}

model Collection {
  id           Int                @id @default(autoincrement())
  title        String             @unique
  description  String?
  category     CollectionCategory @default(GENERAL)
  films        FilmCollection[]
  events       CollectionEvent[]
  pendingFilms PendingFilm[]
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")

  @@map("collections")
}

model FilmCollection {
  id           Int        @id @default(autoincrement())
  filmId       Int        @map("film_id")
  film         Film       @relation(fields: [filmId], references: [id], onDelete: Cascade)
  collectionId Int        @map("collection_id")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  order        Int?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([filmId, collectionId])
  @@map("films_collections")
}

model Award {
  id          Int                   @id @default(autoincrement())
  title       String                @unique
  description String?
  nominations Nomination[]
  films       FilmAwardNomination[]
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")

  @@map("awards")
}

model Nomination {
  id                 Int                   @id @default(autoincrement())
  title              String
  award              Award                 @relation(fields: [awardId], references: [id], onDelete: Cascade)
  awardId            Int                   @map("award_id")
  shouldIncludeActor Boolean               @default(false) @map("should_include_actor")
  films              FilmAwardNomination[]
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @updatedAt @map("updated_at")

  @@map("nominations")
}

model FilmAwardNomination {
  id           Int        @id @default(autoincrement())
  awardId      Int        @map("award_id")
  award        Award      @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  nominationId Int        @map("nomination_id")
  film         Film       @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId       Int        @map("film_id")
  comment      String?
  actorId      Int?       @map("actor_id")
  person       Person?    @relation(fields: [actorId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([awardId, filmId, nominationId])
  @@map("film_award_nominations")
}

model FilmTrailer {
  id        Int      @id @default(autoincrement())
  videoId   String   @map("video_id")
  order     Int
  filmId    Int      @map("film_id")
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([filmId, videoId])
  @@map("film_trailers")
}

model SeriesExtension {
  id            Int       @id @default(autoincrement())
  episodesTotal Int       @default(1) @map("episodes_total")
  seasonsTotal  Int       @default(1) @map("seasons_total")
  finishedAt    DateTime? @map("finished_at") @db.Date
  filmId        Int       @unique @map("film_id")
  film          Film?     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("series_extensions")
}

model FilmChapterKey {
  key       String   @id
  films     Film[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("film_chapter_keys")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password     String
  refreshToken String?  @map("refresh_token")
  verified     Boolean? @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model PendingFilm {
  id           Int         @id @default(autoincrement())
  title        String
  priority     Int         @default(1)
  rating       Int?
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("pending_films")
}

model CollectionEvent {
  id            Int        @id @default(autoincrement())
  title         String
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Restrict)
  collectionId  Int        @map("collection_id")
  startDateCode Int        @map("start_date_code")
  endDateCode   Int        @map("end_date_code")
  yearFrom      Int        @default(0) @map("year_from")
  titleFilmId   Int        @map("title_film_id")
  film          Film?      @relation(fields: [titleFilmId], references: [id])
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("collection_events")
}

model PageContent {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  pageKey String @map("page_key")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("page_content")
}

enum TitleType {
  FILM
  SERIES

  @@map("title_type")
}

enum TitleStyle {
  LIVE_ACTION
  ANIMATION

  @@map("title_style")
}

enum CollectionCategory {
  GENERAL
  CINEMATIC_UNIVERSE
  TOP

  @@map("collection_category")
}

enum PersonRole {
  DIRECTOR
  WRITER
  PRODUCER
  COMPOSER
  CAMERAMAN
  CREATOR
  ACTOR

  @@map("person_role")
}
